generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  ACTIVE
  COMPLETED
  CANCELLED
  REFUNDED
}

model User {
  id           String  @id @default(uuid())
  name         String
  phone        String? @unique
  email        String  @unique
  passwordHash String

  dateOfBirth   DateTime?
  licenseNumber String?
  address       String?
  city          String?
  state         String?
  zipCode       String?

  isVerified Boolean @default(false)
  isActive   Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshTokens RefreshToken[]
  bookings      Booking[]
}

model RefreshToken {
  id               String    @id @default(uuid())
  tokenHash        String
  tokenFingerprint String
  expiresAt        DateTime
  createdAt        DateTime  @default(now())
  createdByIp      String?
  revokedAt        DateTime?
  revokedByIp      String?
  revokedReason    String?
  replacedByToken  String? // id of the new token
  userAgent        String?
  isActive         Boolean   @default(true)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VehicleType {
  id       String    @id @default(uuid())
  name     String    @unique
  vehicles Vehicle[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vehicle {
  id                 String  @id @default(uuid())
  name               String
  number             String  @unique
  imageUrl           String
  pricePerDay        Decimal
  includedKmPerDay   Int
  totalPriceFor2Days Decimal
  includedKmFor2Days Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  locations VehicleLocation[]
  bookings  Booking[]

  vehicleTypeId String
  vehicleType   VehicleType @relation(fields: [vehicleTypeId], references: [id])

  @@index([vehicleTypeId])
}

model VehicleLocation {
  id       String @id @default(uuid())
  location String

  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

model Booking {
  id         String        @id @default(uuid())
  startDate  DateTime
  endDate    DateTime
  startTime  String
  endTime    String
  location   String
  totalPrice Decimal
  status     BookingStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  @@index([userId])
  @@index([vehicleId])
  @@index([status])
}
